name: Build docker ECR
on:
  workflow_call:
    outputs:
      trimmed_docker_tag:
        description: "Trimmed docker tag"
        value: ${{ jobs.docker.outputs.trimmed_docker_tag_1 }}
    inputs:
      CHECKOUT_GIT_REF:
        required: true
        type: string
        description: "Can be: commit hash, refs/tags/CUSTOM_TAG or BRANCH_NAME"
      AWS_ACCOUNT_ID:
        required: true
        type: string
        description: "AWS account id"
      DEPLOYER_ROLE_NAME:
        required: true
        type: string
        description: "AWS IAM deployer role in AWS account"
      BEFORE_BUILD_CMD:
        required: false
        type: string
        description: "Optional before build command to run"
      AWS_REGION:
        required: true
        type: string
        description: "AWS region"
      ECR_REPOSITORY:
        type: string
        required: false
        description: "Name of ECR repository where docker image will be pushed."
      DOCKER_TAG_1:
        type: string
        required: false
        description: "Name of docker image tag1 which will be pushed to ECR."
      DOCKER_TAG_2:
        type: string
        required: false
        description: "(Optional) Name of docker image tag2 which will be pushed to ECR."
      DOCKER_LATEST_TAG:
        type: string
        required: false
        default: 'latest'
        description: "Name of default latest docker image which will be pushed to ECR. Default: latest"
      DOCKER_FILE_NAME:
        type: string
        required: false
        default: 'Dockerfile'
        description: "Name of Docker file. E.g. CustomDockerfile. Can be used with inputs.SUB_DIR. Default: Dockerfile"
      GITHUB_INPUT_ARTIFACT_NAME:
        type: string
        required: false
        description: "(Optional) Name of input GitHub Artifact containing zip file with files required for docker build."
      GITHUB_INPUT_ARTIFACT_ZIP_FILE_NAME:
        type: string
        required: false
        description: "(Optional) Name of zip file inside input GitHub Artifact containing files required for docker build."
      JOB_GITHUB_ENVIRONMENT:
        type: string
        required: false
        description: "Optional name of github environment. When set, approval will be required."
      RUNNER_LABEL_ARRAY_STRING:
        type: string
        required: true
        description: "Runner labels array. e.g.[\"ubuntu-latest\"]"
      DOCKER_BUILD_ARGS:
        type: string
        required: false
        description: "Optional arguments to pass in to docker Command"
      SUB_DIR:
        type: string
        required: false
        default: "."
        description: "(Optional) Working directory for docker build command. Default: '.'"
    secrets:
      DOCKER_BUILD_ARGS_ENCRYPTED:
        required: false
        description: "Optional arguments to pass in to docker Command with secrets from Github."

permissions:
  id-token: write
  contents: write    # This is required for actions/checkout@v1

env:
  DEPLOYER_ROLE_ARN: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/${{ inputs.DEPLOYER_ROLE_NAME }}
  ECR_REGISTRY: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com

jobs:
  docker:
    name: Build & push docker
    runs-on: ubuntu-latest
    environment: ${{ inputs.JOB_GITHUB_ENVIRONMENT }}
    outputs:
      trimmed_docker_tag_1: ${{ env.DOCKER_TAG_1_TRIMMED }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ inputs.CHECKOUT_GIT_REF }}

      - name: Download input artifact
        if: ${{ inputs.GITHUB_INPUT_ARTIFACT_NAME }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.GITHUB_INPUT_ARTIFACT_NAME }}

      - name: Unzip GitHub Artifact file
        if: ${{ inputs.GITHUB_INPUT_ARTIFACT_NAME }}
        run: unzip -o ${{ inputs.GITHUB_INPUT_ARTIFACT_ZIP_FILE_NAME }}

      - name: Simulacja logowania do AWS
        run: echo "Symulacja logowania do AWS"

      - name: Simulacja logowania do ECR
        run: echo "Symulacja logowania do ECR"

      - name: Before build
        if: inputs.BEFORE_BUILD_CMD != ''
        run: ${{ inputs.BEFORE_BUILD_CMD }}

      - name: Remove slash from DOCKER_TAG_1 and trim to 128 characters
        id: tag_trim1
        run: |
          DOCKER_TAG_1_NO_SLASH=$(echo "${{ inputs.DOCKER_TAG_1 }}" | sed 's#/#-#g')
          DOCKER_TAG_1_TRIMMED="${DOCKER_TAG_1_NO_SLASH:0:127}"
          echo "DOCKER_TAG_1_TRIMMED=${DOCKER_TAG_1_TRIMMED}" >> $GITHUB_ENV

      - name: Remove slash from DOCKER_TAG_2 and trim to 128 characters
        id: tag_trim2
        if: ${{ inputs.DOCKER_TAG_2 }}
        run: |
          DOCKER_TAG_2_NO_SLASH=$(echo "${{ inputs.DOCKER_TAG_2 }}" | sed 's#/#-#g')
          DOCKER_TAG_2_TRIMMED="${DOCKER_TAG_2_NO_SLASH:0:127}"
          echo "DOCKER_TAG_2_TRIMMED=${DOCKER_TAG_2_TRIMMED}" >> $GITHUB_ENV

      - name: Simulacja budowania Dockera
        id: docker_build
        run: |
          echo "docker build -f ${{ inputs.DOCKER_FILE_NAME }} ."

      - name: Symulacja tagowania i wysyłania DOCKER_TAG_1 & latest
        if: ${{ inputs.ECR_REPOSITORY != '' }}
        run: |
          echo "docker tag ${ECR_IMAGE_URI_TAG_1} ${ECR_IMAGE_URI_TAG_LATEST}"
          echo "docker push ${ECR_IMAGE_URI_TAG_1}"
          echo "docker push ${ECR_IMAGE_URI_TAG_LATEST}"

      - name: Symulacja tagowania i wysyłania DOCKER_TAG_2
        if: ${{ inputs.ECR_REPOSITORY != '' && inputs.DOCKER_TAG_2 != '' }}
        run: |
          echo "docker tag ${ECR_IMAGE_URI_TAG_1} ${ECR_IMAGE_URI_TAG_2}"
          echo "docker push ${ECR_IMAGE_URI_TAG_2}"
